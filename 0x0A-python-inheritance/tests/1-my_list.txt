The ``1-my_ist`` module   
========================

Using ``1-my_list``
-------------------

Import function from module:
    >>> MyList = __import__('1-my_list').MyList

Correct Class Type test:
    >>> new_list = MyList()
    >>> type(new_list) == MyList
    True

Correct Instance test:
    >>> ml = MyList()
    >>> isinstance(ml, list)
    True

print_sorted method is an instance method:
    >>> type(MyList.__dict__['print_sorted'])
    <class 'function'>

print_sorted method via class with no args:
    >>> ml.__class__.print_sorted()
    Traceback (most recent call last):
    TypeError: print_sorted() missing 1 required positional argument: 'self'

print_sorted method called with 1 arg:
    >>> ml.print_sorted([4])
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 2 were given

Test for emmpy list:
    >>> ml = MyList()
    >>> ml.print_sorted()
    []

Test normal list:
    >>> ml = MyList([1, 3, 2, 9, 5])
    >>> ml.print_sorted()
    [1, 2, 3, 5, 9]

check print_sorted() with no sorted append with negative number:
    >>> ml = MyList()
    >>> ml.append(-2)
    >>> ml.append(-1)
    >>> ml.append(-5)
    >>> ml.print_sorted()
    [-5, -2, -1]

Test for str:
    >>> ml = MyList([2, 4, 6, 7])
    >>> str(ml)
    '[2, 4, 6, 7]'

Test if print_sorted() returns a new list:
    >>> ml = MyList([2, 4, 6, 1, 8])
    >>> new_list = ml.print_sorted()
    [1, 2, 4, 6, 8]
    >>> new_list is ml
    False

Test for append:
    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(5)
    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]
